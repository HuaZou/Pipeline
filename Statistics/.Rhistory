summarise_each(funs=my_ratio(count))
ratio <-
my_ratio <- function(x, n=count){
sum(x > n)/length(x)
}
ratio <- 0.5
my_ratio <- function(x, n=count){
sum(x > n)/length(x)
}
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
x <- mdat
count <- 100
ratio <- 0.5
my_ratio <- function(x, n=count){
sum(x > n)/length(x)
}
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x) > r)
}
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x))
}
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio)) %>%
summarise(sum(x > ratio))
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio)) %>%
group_by(genotype) %>%
summarise(sum(x > ratio))
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio)) %>%
group_by(genotype) %>%
summarise_all(sum(x > ratio))
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio)) %>%
group_by(genotype) %>%
summarise_at(sum(x > ratio))
mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio)) %>%
group_by(genotype) %>%
summarise_each(sum(x > ratio))
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x) > r)
}
num <- mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
View(num)
return(sum(x > n)/length(x))
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x))
}
num <- mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
View(num)
ratio <- 0.2
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x) > r)
}
num <- mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
View(num)
num[1, ]
View(num)
num1 <- sum(num[1, ]==TRUE)
num1
num1 <- num[1, ]==TRUE
num1 <- colnames(-1)[num[1, ]==TRUE]
num[, 1]
num[1, ]
as.logical(num[1, ])
colnames(num)[-1]
as.logical(num[1, ])
as.numeric(num[1, ])
colnames(num)(as.logical(num[1, ]))
num[-1, 1]
num[, -1]
num[1, -1]
num[1, -1][num[1, -1]==TRUE]
which(num[1, -1]==TRUE)
colnames(num[1, -1])[which(num[1, -1]==TRUE)]
# otu names
lst <- list()
for (i in 1:nrow(num)){
lst[[i]] <- colnames(num[i, -1])[which(num[i, -1]==TRUE)]
}
lst[[1]]
lst[2]
lst[3]
library(MyRtools)
?venn1
venn1
length(lst)
lst[1]
lst[[1]]
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in 2:length(lst)){
inner <- intersect(lst[[j]], lst[[k]])
tmp <- c(tmp, inner)
}
tmp
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in 2:length(lst)){
inner <- length(intersect(lst[[j]], lst[[k]]))
tmp <- c(tmp, inner)
}
tmp
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in 2:length(lst)){
inner <- length(intersect(lst[[j]], lst[[k]]))
print(j, k)
tmp <- c(tmp, inner)
}
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
print(j)
for(k in 2:length(lst)){
inner <- length(intersect(lst[[j]], lst[[k]]))
print(k)
tmp <- c(tmp, inner)
}
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in 2:length(lst)){
inner <- length(intersect(lst[[j]], lst[[k]]))
print(paste(j, k, sep = "vs"))
tmp <- c(tmp, inner)
}
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in j+1:length(lst)){
inner <- length(intersect(lst[[j]], lst[[k]]))
print(paste(j, k, sep = "vs"))
tmp <- c(tmp, inner)
}
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in j+1:length(lst)){
print(k)
inner <- length(intersect(lst[[j]], lst[[k]]))
print(paste(j, k, sep = "vs"))
tmp <- c(tmp, inner)
}
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in j+1:length(lst)){
if(j != k){
inner <- length(intersect(lst[[j]], lst[[k]]))
print(paste(j, k, sep = "vs"))
tmp <- c(tmp, inner)
}
tmp <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in j:length(lst)){
if(j != k){
inner <- length(intersect(lst[[j]], lst[[k]]))
print(paste(j, k, sep = "vs"))
tmp <- c(tmp, inner)
}
names(lst) <- levels(num$genotype)
lst[[1]]
lst[1]
names(lst)
?list
str(nem)
str(mun)
inner <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in j:length(lst)){
if(j != k){
number <- length(intersect(lst[[j]], lst[[k]]))
name <- paste(num$genotype[j], num$genotype[k], sep = "vs")
tmp <- c(name, number)
inner <- rbind(inner, tmp)
}
View(inner)
for(m in 1:length(lst)){
tmp2 <- c(num$genotype[m], length(lst[[m]]))
inner <- rbind(inner, tmp2)
}
View(inner)
res <- inner %>% data.frame()
View(res)
View(inner)
res <- inner %>% t() %>% t() %>% data.frame() %>%
setNames(c("Group", "Number"))
View(res)
rownames(res) <- NULL
View(res)
knitr::opts_chunk$set(echo = T, warning = F)
library(dplyr)
library(tibble)
library(DT)
library(data.table)
otus <- fread("dataset/otutab.txt")
phen <- fread("dataset/design.txt")
merge_fun <- function(x, y){
# filtering OTU by count
ratio <- apply(x[, -1], 1, function(x){sum(x > 10)/length(x)})
otus.temp <- x %>% filter(ratio > 0.4) %>% data.table()
transposedt <- function(dt, varlabel) {
require(data.table)
dtrows = names(dt)
dtcols = as.list(c(dt[, 1]))
dtt = transpose(dt)
dtt[, eval(varlabel) := dtrows]
setnames(dtt, old = names(dtt), new = c(dtcols[[1]], eval(varlabel)))
dtt = dtt[-1, ]
setcolorder(dtt, c(eval(varlabel), names(dtt)[1:(ncol(dtt) - 1)]))
return(dtt)
}
otus.t <- transposedt(otus.temp, "SampleID")
otus.t2 <- apply(otus.t[, -1], 1, as.numeric) %>% t() %>% data.frame()
colnames(otus.t2) <- gsub("\r", "", colnames(otus.t)[-1])
rownames(otus.t2) <- otus.t$SampleID
res <- inner_join(phen %>% select(c(1, 5:7)),
otus.t2 %>% rownames_to_column("SampleID"), by = "SampleID")
return(res)
}
mdat <- merge_fun(otus, phen)
specific_otu <- function(x, count, ratio){
# x <- mdat
# count <- 20
# ratio <- 0.2
# count & ratio
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x) > r)
}
num <- mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
# otu names
lst <- list()
for (i in 1:nrow(num)){
lst[[i]] <- colnames(num[i, -1])[which(num[i, -1]==TRUE)]
}
inner <- c()
# otu numbers
for(j in 1:(length(lst)-1)){
for(k in j:length(lst)){
if(j != k){
number <- length(intersect(lst[[j]], lst[[k]]))
name <- paste(num$genotype[j], num$genotype[k], sep = "vs")
tmp <- c(name, number)
inner <- rbind(inner, tmp)
}
for(m in 1:length(lst)){
tmp2 <- c(num$genotype[m], length(lst[[m]]))
inner <- rbind(inner, tmp2)
}
res <- inner %>% data.frame() %>%
setNames(c("Group", "Number"))
rownames(res) <- NULL
return(res)
}
number_otu <- specific_otu(mdat, 20, 0.4)
View(number_otu)
venn1
venn2
venn1
library(VennDiagram)
?venn.diagram
colnames(number_otu)
View(number_otu)
specific_otu <- function(x, count, ratio){
# x <- mdat
# count <- 20
# ratio <- 0.2
# count & ratio
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x) > r)
}
num <- mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
# otu names
lst <- list()
for (i in 1:nrow(num)){
lst[[i]] <- colnames(num[i, -1])[which(num[i, -1]==TRUE)]
}
# count of interset oTU in two groups
inner <- c()
for(j in 1:(length(lst)-1)){
for(k in j:length(lst)){
if(j != k){
number <- length(intersect(lst[[j]], lst[[k]]))
name <- paste(num$genotype[j], num$genotype[k], sep = "vs")
tmp <- c(name, number)
inner <- rbind(inner, tmp)
}
# count of each group
for(m in 1:length(lst)){
tmp2 <- c(num$genotype[m], length(lst[[m]]))
inner <- rbind(inner, tmp2)
}
res <- inner %>% data.frame() %>%
setNames(c("Group", "Number"))
rownames(res) <- NULL
return(list(num=res, lst=lst))
}
number_otu <- specific_otu(mdat, 20, 0.4)
number_otu$lst
names(number_otu$lst)
specific_otu <- function(x, count, ratio){
# x <- mdat
# count <- 20
# ratio <- 0.2
# count & ratio
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x) > r)
}
num <- mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
# otu names
lst <- list()
for (i in 1:nrow(num)){
lst[[i]] <- colnames(num[i, -1])[which(num[i, -1]==TRUE)]
}
names(lst) <- num$genotype
# count of interset oTU in two groups
inner <- c()
for(j in 1:(length(lst)-1)){
for(k in j:length(lst)){
if(j != k){
number <- length(intersect(lst[[j]], lst[[k]]))
name <- paste(num$genotype[j], num$genotype[k], sep = "vs")
tmp <- c(name, number)
inner <- rbind(inner, tmp)
}
# count of each group
for(m in 1:length(lst)){
tmp2 <- c(num$genotype[m], length(lst[[m]]))
inner <- rbind(inner, tmp2)
}
res <- inner %>% data.frame() %>%
setNames(c("Group", "Number"))
rownames(res) <- NULL
return(list(num=res, lst=lst))
}
number_otu <- specific_otu(mdat, 20, 0.4)
names(number_otu$lst)
inner_otu <- specific_otu(mdat, 20, 0.4)
library(VennDiagram)
venn.diagram(x = list(KO = inner_otu$lst$KO, OE = inner_otu$lst$OE, WT = inner_otu$lst$WT),
filename = "Group4.png",
height = 450, width = 450, resolution = 300, imagetype = "png",
col = "transparent", fill = c("cornflowerblue", "green",
"yellow", "darkorchid1"), alpha = 0.5, cex = 0.45,
cat.cex = 0.45)
library(VennDiagram)
venn.diagram(x = list(KO = inner_otu$lst$KO, OE = inner_otu$lst$OE, WT = inner_otu$lst$WT),
filename = "Group4.png",
height = 450, width = 450, resolution = 300, imagetype = "png",
col = "transparent", fill = c("cornflowerblue", "green",
"yellow"), alpha = 0.5, cex = 0.45,
cat.cex = 0.45)
specific_otu <- function(x, count, ratio){
# x <- mdat
# count <- 20
# ratio <- 0.2
# count & ratio
my_ratio <- function(x, n=count, r=ratio){
return(sum(x > n)/length(x) > r)
}
num <- mdat[, -c(1:2, 4)] %>% group_by(genotype) %>%
summarise_each(funs(my_ratio))
# otu names
lst <- list()
for (i in 1:nrow(num)){
lst[[i]] <- colnames(num[i, -1])[which(num[i, -1]==TRUE)]
}
names(lst) <- num$genotype
# count of interset oTU in two groups
# inner <- c()
# for(j in 1:(length(lst)-1)){
#   for(k in j:length(lst)){
#     if(j != k){
#       number <- length(intersect(lst[[j]], lst[[k]]))
#       name <- paste(num$genotype[j], num$genotype[k], sep = "vs")
#       tmp <- c(name, number)
#       inner <- rbind(inner, tmp)
#     }
#   }
# }
#
# # count of each group
# for(m in 1:length(lst)){
#   tmp2 <- c(num$genotype[m], length(lst[[m]]))
#   inner <- rbind(inner, tmp2)
# }
#
# res <- inner %>% data.frame() %>%
#   setNames(c("Group", "Number"))
# rownames(res) <- NULL
# return(list(num=res, lst=lst))
return(lst)
}
inner_otu <- specific_otu(mdat, 20, 0.4)
library(VennDiagram)
venn.diagram(x = list(KO = inner_otu$KO, OE = inner_otu$OE, WT = inner_otu$WT),
filename = "Group4.png",
height = 450, width = 450, resolution = 300, imagetype = "png",
col = "transparent", fill = c("cornflowerblue", "green",
"yellow"), alpha = 0.5, cex = 0.45,
cat.cex = 0.45)
richness <- fread("dataset/alpha/alpha_rare.txt")
View(richness)
richness
rare <- fread("dataset/alpha/alpha_rare.txt")
phen <- fread("dataset/design.txt")
View(richness)
rare <- fread("dataset/alpha/alpha_rare.txt")
phen <- fread("dataset/design.txt")
View(rare)
tidyr::gather(rare, "sample", "richness")
str(tidyr::gather(rare, "sample", "richness"))
str(tidyr::gather(rare, "sample", "richness", -richness))
dat.rare <- tidyr::gather(rare, "sample", "richness", -richness)
View(dat.rare)
dat.rare <- rare %>% tidyr::gather("sample", "value", -richness)
View(dat.rare)
dat.rare <- rare %>% tidyr::gather("group", "value", -richness)
colnames(phen)
View(phen)
View(dat.rare)
dat.rare <- rare %>% tidyr::gather("SampleID", "value", -richness)
rare.phen <- inner_join(phen %>% select(SampleID, genotype),
dat.rare, by = "SampleID")
View(rare.phen)
rare.phen <- inner_join(phen %>% select(SampleID, genotype),
dat.rare, by = "SampleID") %>%
mutate(richness=factor(richness, levels = c(1:100)))
View(rare.phen)
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()
library(ggplot2)
dat.rare <- rare %>% tidyr::gather("SampleID", "value", -richness)
rare.phen <- inner_join(phen %>% select(SampleID, genotype),
dat.rare, by = "SampleID") %>%
mutate(richness=factor(richness, levels = c(1:100)))
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()+
theme_classic()
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
ggplot(rare.phen, aes(x=richness, y=value,  color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
ggplot(rare.phen, aes(x=richness, y=value, group=genotype, color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
rare.phen <- inner_join(phen %>% select(SampleID, genotype),
dat.rare, by = "SampleID") %>%
mutate(richness=factor(richness, levels = c(1:100)),
genotype=factor(genotype))
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
ggplot(rare.phen, aes(x=richness, y=value, group=genotype, color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
ggplot(rare.phen, aes(x=richness, y=value, group=SampleID, color=genotype)) +
geom_line()+
xlab("Rarefraction Percentage")+
ylab("Richness (Observed OTUs)")+
scale_x_discrete(breaks = c(1:10)*10, labels = c(1:10)*10)+
theme_classic()
