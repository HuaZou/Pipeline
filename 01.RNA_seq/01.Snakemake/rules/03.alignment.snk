def _picard_multi_arg(flag, files):
    return " ".join(flag + f for f in files)

rule alignment:
    input:
        read1 = expand("{trim}/{{sample}}_1.fastq.gz",
                trim=config["results"]["trim"],
                sample=samples.index),
        read2 = expand("{trim}/{{sample}}_2.fastq.gz",
                trim=config["results"]["trim"]),
        
    output:
        sam = temp(os.path.join(config["results"]["alignment"], "{sample}.sam"))
    params:
        index   = expand("{index}/{filename}",
                        index=config["results"]["index"],
                        filename=config["filename"]),
        threads = config["params"]["alignment"]["threads1"]
    log:
        os.path.join(config["logs"], "03.alignsam.{sample}.log")
    shell:
        '''
        hisat2 -p {params.threads} -x {params.index} \
            --dta --rna-strandness RF \
            -1 {input.read1} -2 {input.read2} -S {output} 2>{log} 
        '''

rule sam2bam:
    input:
        sam = expand("{align}/{{sample}}.sam",
                    align=config["results"]["alignment"],
                    sample=samples.index)
    output:
        bam = os.path.join(config["results"]["alignment"], "{sample}.sorted.bam")
    params:
        threads = config["params"]["alignment"]["threads2"]
    log:
        os.path.join(config["logs"], "03.alignbam.{sample}.log")
    shell:
        '''
        samtools view -@ {params.threads} -hbS {input.sam} | samtools sort -@ 4 -o {output.bam} 2>{log}
        '''

rule picard_merge:
    input:
        expand("{align}/{{unit}}_Rep{times}.sorted.bam",
                align=config["results"]["alignment"],  
                unit=["UHR", "HBR"],
                times=["1", "2", "3"])       
    output:
        os.path.join(config["results"]["alignment"], "{unit}.merged.bam")
    log:
        os.path.join(config["logs"], "03.alignmerge.{unit}.log")
    run:
        bams=_picard_multi_arg("I=", input)
        shell(
        "picard MergeSamFiles "
        "{bams} "
        "O={output} "
        "VALIDATION_STRINGENCY=LENIENT "
        "CREATE_INDEX=true "
        "MSD=true "
        "ASSUME_SORTED=true "
        "USE_THREADING=true 2> {log} "
        )
