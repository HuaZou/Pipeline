def get_fastq(wildcards, samples, read_pair="fq1"):
    return samples.loc[wildcards.sample, [read_pair]][0]

rule trim_flexbar:
    input:
        read1 = lambda wildcards: get_fastq(wildcards, samples, "fq1"),
        read2 = lambda wildcards: get_fastq(wildcards, samples, "fq2")
    output:
        expand("{trim}/{{sample}}_{read}.fastq.gz", 
                trim=config["results"]["trim"],
                read=["1", "2"])
    params:
        adapter     = config["params"]["trim"]["adapter"],
        min_overlap = config["params"]["trim"]["min_overlap"],
        trim_left   = config["params"]["trim"]["trim_left"],
        max_uncall  = config["params"]["trim"]["max_uncall"],
        min_length  = config["params"]["trim"]["min_length"],
        threads     = config["params"]["trim"]["threads"],
        prefix      = os.path.join(config["results"]["trim"], "{sample}")
    log:
        os.path.join(config["logs"], "01.trim_{sample}.log")
    shell:
        '''
        flexbar --adapter-min-overlap {params.min_overlap} --adapter-trim-end RIGHT \
            --adapters {params.adapter} --pre-trim-left {params.trim_left} --max-uncalled {params.max_uncall} \
            --min-read-length {params.min_length} --threads {params.threads} --zip-output GZ \
            --reads {input.read1} --reads2 {input.read2} \
            --target {params.prefix} 2>{log}
        '''
