def get_fastq(wildcards, samples, read_pair="fq1"):
    return samples.loc[wildcards.sample, [read_pair]]

rule merge_pairs:
    input:
        read1 = lambda wildcards: get_fastq(wildcards, samples, "fq1"),
        read2 = lambda wildcards: get_fastq(wildcards, samples, "fq2")
    output:
        temp(os.path.join(config["results"]["trim"], "{sample}_merged.fq"))
    params:
        name = "{sample}."
    log:
        os.path.join(config["logs"], "01.trim_{sample}.merge_fq.log")
    shell:
        '''
        vsearch -fastq_mergepairs {input.read1} -reverse {input.read2} \
            -fastqout {output} -relabel {params.name} 2>{log}
        '''

rule filter_fqTofa:
    input:
        read = expand("{trim}/{{sample}}_merged.fq",
                        trim=config["results"]["trim"],
                        sample=samples.index)
    output:
        outfile = temp(expand("{trim}/{{sample}}_merged.trimmed.fa",
                        trim=config["results"]["trim"],
                        sample=samples.index))
    params:
        left  = config["params"]["trim"]["left_primer"],
        right = config["params"]["trim"]["right_primer"],
        rate  = config["params"]["trim"]["max_err_rate"],
        maxns = config["params"]["trim"]["maxns"]
    log:
        os.path.join(config["logs"], "01.trim_{sample}_filter.log")
    shell:
        '''
        vsearch --fastx_filter {input.read} --fastq_stripleft {params.left} --fastq_stripright {params.right} \
            --fastq_maxee_rate {params.rate} --fastq_maxns 0 --fastaout {output.outfile}  2>{log}
        '''
        
rule merge_trim_fa:
    input:
        expand("{trim}/{sample}_merged.trimmed.fa",
                        trim=config["results"]["trim"],
                        sample=samples.index)
    output:
        os.path.join(config["results"]["trim"], "summary_trimmed.fa")
    shell:
        '''
        cat {input} > {output} 
        '''    
