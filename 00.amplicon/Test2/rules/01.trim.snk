def get_fastq(wildcards, samples, read_pair="fq1"):
    return samples.loc[wildcards.sample, [read_pair]]

rule cutadapt:
    input:
        read1 = lambda wildcards: get_fastq(wildcards, samples, "fq1"),
        read2 = lambda wildcards: get_fastq(wildcards, samples, "fq2")
    output:
        r1 = os.path.join(config["results"]["trim"], "{sample}_1.trimmed.fq.gz"),
        r2 = os.path.join(config["results"]["trim"], "{sample}_2.trimmed.fq.gz")
    params:
        left     = config["params"]["trim"]["left_primer"],
        right    = config["params"]["trim"]["right_primer"],
        rate     = config["params"]["trim"]["max_err_rate"],
        overlap  = config["params"]["trim"]["overlap"],
        minLen   = config["params"]["trim"]["minLen"]
    log:
        os.path.join(config["logs"], "01.trim_{sample}.log")
    shell:
        '''
        cutadapt -a {params.left} -g {params.right} \ 
            -o {output.r1} -p {output.r2} \
            {input.read1} {input.read2} \
            -e {params.rate} -O {params.overlap} -m {params.minLen}
        '''

rule qiime2_config:
    input:
        expand("{trim}/{sample}_1.trimmed.fq.gz",
                trim=config["results"]["trim"],
                sample=samples.index)
    params:
        path   = config["results"]["trim"],
        script = config["params"]["trim"]["script"]
    output:
        os.path.join(config["results"]["trim"], "Sample_path.qiime2.tsv")
    log:
       os.path.join(config["logs"], "01.trim_qiime2.file.log")
    shell:
        '''
        python {params.script} -p {params.path} -o {output} 2>{log}
        ''' 
